"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoSizeText = exports.ResizeTextMode = void 0;
const React = __importStar(require("react"));
const Group_1 = __importDefault(require("./components/Group"));
const MaxLines_1 = __importDefault(require("./components/MaxLines"));
const MinFontSize_1 = __importDefault(require("./components/MinFontSize"));
const OverflowReplacement_1 = __importDefault(require("./components/OverflowReplacement"));
const PresetFontSizes_1 = __importDefault(require("./components/PresetFontSizes"));
const StepGranularity_1 = __importDefault(require("./components/StepGranularity"));
var ResizeTextMode;
(function (ResizeTextMode) {
    ResizeTextMode["max_lines"] = "max_lines";
    ResizeTextMode["min_font_size"] = "min_font_size";
    ResizeTextMode["preset_font_sizes"] = "preset_font_sizes";
    ResizeTextMode["overflow_replacement"] = "overflow_replacement";
    ResizeTextMode["step_granularity"] = "step_granularity";
    ResizeTextMode["group"] = "group";
})(ResizeTextMode = exports.ResizeTextMode || (exports.ResizeTextMode = {}));
const AutoSizeText = ({ ...props }) => {
    const selectedMode = props.mode;
    const Modes = {
        max_lines: <MaxLines_1.default {...props}/>,
        min_font_size: <MinFontSize_1.default {...props}/>,
        preset_font_sizes: <PresetFontSizes_1.default {...props}/>,
        overflow_replacement: <OverflowReplacement_1.default {...props}/>,
        step_granularity: <StepGranularity_1.default {...props}/>,
        group: <Group_1.default {...props}/>,
        default: <MaxLines_1.default {...props}/>,
    };
    return Modes[selectedMode] || Modes.default;
};
exports.AutoSizeText = AutoSizeText;
//# sourceMappingURL=index.js.map